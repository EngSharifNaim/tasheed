// Slick SLider {Best Techers} slider
$(document).on('ready', function () {
	$(".vertical-center-4").slick({
		dots: true,
		vertical: true,
		centerMode: true,
		slidesToShow: 4,
		slidesToScroll: 5
	});
	$(".vertical-center-3").slick({
		dots: true,
		vertical: true,
		centerMode: true,
		slidesToShow: 3,
		slidesToScroll: 3
	});
	$(".vertical-center-2").slick({
		dots: true,
		vertical: true,
		centerMode: true,
		slidesToShow: 5,
		slidesToScroll: 1
	});
	$(".vertical-center").slick({
		dots: true,
		vertical: true,
		centerMode: true,
	});
	$(".vertical").slick({
		dots: true,
		vertical: true,
		slidesToShow: 3,
		slidesToScroll: 3
	});
	$(".regular").slick({
		dots: true,
		infinite: true,
		slidesToShow: 4,
		slidesToScroll: 1,
		lazyLoad: 'ondemand', // ondemand progressive anticipated

	});
	$(".center").slick({
		dots: true,
		infinite: true,
		centerMode: true,
		slidesToShow: 4,
		slidesToScroll: 1,
		lazyLoad: 'ondemand', // ondemand progressive anticipated
		infinite: true
	});
	$(".variable").slick({
		dots: true,
		infinite: true,
		variableWidth: true,
		slidesToShow: 5,
		slidesToScroll: 2,
		lazyLoad: 'ondemand', // ondemand progressive anticipated
		infinite: true

	});
	$(".lazy").slick({
		dots: true,
		slidesToShow: 4,
		slidesToScroll: 1,
		lazyLoad: 'ondemand', // ondemand progressive anticipated
		//appendArrows: '#slider_navs',

	});
	$(".lazy2").slick({
		dots: true,
		slidesToShow: 3,
		slidesToScroll: 1,
		lazyLoad: 'ondemand', // ondemand progressive anticipated
		//appendArrows: '#slider_navs',

	});

	$(".slider_navs").slick({
		dots: true,
		infinite: true,
		variableWidth: true,
		slidesToShow: 4,
		slidesToScroll: 1,
		lazyLoad: 'ondemand', // ondemand progressive anticipated
		infinite: true,
		//appendArrows: '#slider_navs',

	});







	function initMap() {

		var location = new google.maps.LatLng(24.820477, 46.612209);

		var mapCanvas = document.getElementById('map');
		var mapOptions = {
			center: location,
			zoom: 10,
			panControl: false,
			scrollwheel: false,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		}
		var map = new google.maps.Map(mapCanvas, mapOptions);

		var markerImage = 'marker.png';

		var marker = new google.maps.Marker({
			position: location,
			map: map,
			icon: markerImage
		});

		var contentString = '<div class="info-window">' +
			'<h3>Info Window Content</h3>' +
			'<div class="info-content">' +
			'<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>' +
			'</div>' +
			'</div>';

		var infowindow = new google.maps.InfoWindow({
			content: contentString,
			maxWidth: 400
		});

		marker.addListener('click', function () {
			infowindow.open(map, marker);
		});



		var styles = [{
			"featureType": "landscape",
			"stylers": [{
				"saturation": -100
            }, {
				"lightness": 65
            }, {
				"visibility": "on"
            }]
        }, {
			"featureType": "poi",
			"stylers": [{
				"saturation": -100
            }, {
				"lightness": 51
            }, {
				"visibility": "simplified"
            }]
        }, {
			"featureType": "road.highway",
			"stylers": [{
				"saturation": -100
            }, {
				"visibility": "simplified"
            }]
        }, {
			"featureType": "road.arterial",
			"stylers": [{
				"saturation": -100
            }, {
				"lightness": 30
            }, {
				"visibility": "on"
            }]
        }, {
			"featureType": "road.local",
			"stylers": [{
				"saturation": -100
            }, {
				"lightness": 40
            }, {
				"visibility": "on"
            }]
        }, {
			"featureType": "transit",
			"stylers": [{
				"saturation": -100
            }, {
				"visibility": "simplified"
            }]
        }, {
			"featureType": "administrative.province",
			"stylers": [{
				"visibility": "off"
            }]
        }, {
			"featureType": "water",
			"elementType": "labels",
			"stylers": [{
				"visibility": "on"
            }, {
				"lightness": -25
            }, {
				"saturation": -100
            }]
        }, {
			"featureType": "water",
			"elementType": "geometry",
			"stylers": [{
				"hue": "#ffff00"
            }, {
				"lightness": -25
            }, {
				"saturation": -97
            }]
        }];

		map.set('styles', styles);


	}

	google.maps.event.addDomListener(window, 'load', initMap);

	$('.responsive').slick({
		dots: true,
		infinite: true,
		speed: 1000,
		slidesToShow: 4,
		slidesToScroll: 4,
		responsive: [
			{
				breakpoint: 1024,
				settings: {
					slidesToShow: 4,
					slidesToScroll: 1,
					infinite: true,
					dots: true
				}
    },
			{
				breakpoint: 600,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 480,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 1400,
				settings: {
					slidesToShow: 4,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 1100,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 2
				}
    },
			{
				breakpoint: 1000,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 2
				}
    },

			{
				breakpoint: 740,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
    }

    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
	});


	$('.variable2').slick({
		dots: true,
		infinite: true,
		speed: 1000,
		slidesToShow: 4,
		slidesToScroll: 1,
		responsive: [
			{
				breakpoint: 1024,
				settings: {
					slidesToShow: 5,
					slidesToScroll: 1,
					infinite: true,
					dots: true
				}
    },
			{
				breakpoint: 600,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 480,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 1400,
				settings: {
					slidesToShow: 3,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 1100,
				settings: {
					slidesToShow: 3,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 1000,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 2
				}
    },
			{
				breakpoint: 1023,
				settings: {
					slidesToShow: 3,
					slidesToScroll: 1
				}
    },
			{
				breakpoint: 740,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 1
				}
    }

    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
	});

	var step = 25;
	var scrolling = false;

	// Wire up events for the 'scrollUp' link:
	$("#scrollUp").bind("click", function (event) {
		event.preventDefault();
		// Animates the scrollTop property by the specified
		// step.
		$("#content").animate({
			scrollTop: "-=" + step + "px"
		});
	});


	$("#scrollDown").bind("click", function (event) {
		event.preventDefault();
		$("#content").animate({
			scrollTop: "+=" + step + "px"
		});
	});

	function scrollContent(direction) {
		var amount = (direction === "up" ? "-=8px" : "+=8px");
		$("#content").animate({
			scrollTop: amount
		}, 1, function () {
			if (scrolling) {
				scrollContent(direction);
			}
		});
	}







});








$(document).ready(function () {
	// Initiate magnification powers
	$('img').magnify();
});

jQuery(document).ready(function ($) {
	var $lateral_menu_trigger = $('#cd-menu-trigger'),
		$content_wrapper = $('.cd-main-content'),
		$navigation = $('header');

	//open-close lateral menu clicking on the menu icon
	$lateral_menu_trigger.on('click', function (event) {
		event.preventDefault();

		$lateral_menu_trigger.toggleClass('is-clicked');
		$navigation.toggleClass('lateral-menu-is-open');
		$content_wrapper.toggleClass('lateral-menu-is-open').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {
			// firefox transitions break when parent overflow is changed, so we need to wait for the end of the trasition to give the body an overflow hidden
			$('body').toggleClass('overflow-hidden');
		});
		$('#cd-lateral-nav').toggleClass('lateral-menu-is-open');

		//check if transitions are not supported - i.e. in IE9
		if ($('html').hasClass('no-csstransitions')) {
			$('.website').toggleClass('overflow-hidden');
		}
	});

	//close lateral menu clicking outside the menu itself
	$content_wrapper.on('click', function (event) {
		if (!$(event.target).is('#cd-menu-trigger, #cd-menu-trigger span')) {
			$lateral_menu_trigger.removeClass('is-clicked');
			$navigation.removeClass('lateral-menu-is-open');
			$content_wrapper.removeClass('lateral-menu-is-open').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {
				$('.website').removeClass('overflow-hidden');
			});
			$('#cd-lateral-nav').removeClass('lateral-menu-is-open');
			//check if transitions are not supported
			if ($('html').hasClass('no-csstransitions')) {
				$('.website').removeClass('overflow-hidden');
			}

		}
	});

	//open (or close) submenu items in the lateral menu. Close all the other open submenu items.
	$('.item-has-children').children('a').on('click', function (event) {
		event.preventDefault();
		$(this).toggleClass('submenu-open').next('.sub-menu').slideToggle(200).end().parent('.item-has-children').siblings('.item-has-children').children('a').removeClass('submenu-open').next('.sub-menu').slideUp(200);
	});
});


$(window).load(function () {
	// Animate loader off screen
	$(".se-pre-con").fadeOut("slow");;
});


jQuery(document).ready(function ($) {

	var sliderRange = document.getElementById('slider');

	noUiSlider.create(slider, {
		start: [0, 100],
		connect: true,
		range: {
			'min': 0,
			'max': 100
		}
	});

	var inputNumberStart = document.getElementById('input-number-start');
	var inputNumberEnd = document.getElementById('input-number-end');
	var inputs = [inputNumberStart, inputNumberEnd];

	sliderRange.noUiSlider.on('update', function (values, handle) {

		var value = values[handle];

		if (handle) {
			inputNumberEnd.value = value;
		} else {
			inputNumberStart.value = value;
		}
	});

	inputNumberStart.addEventListener('change', function () {
		sliderRange.noUiSlider.set([this.value, null]);
	});

	inputNumberEnd.addEventListener('change', function () {
		sliderRange.noUiSlider.set([null, this.value]);
	});
});
